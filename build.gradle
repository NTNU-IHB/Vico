plugins {
    id 'base'
    id "com.jfrog.bintray" version "1.8.4" apply(false)
    id 'org.jetbrains.kotlin.jvm' version '1.4.30' apply(false)
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '6.7'
}

version = rootProject.file("VERSION").readLines()[0]

println "Gradle version is ${gradle.getGradleVersion()}"
println("Building ${rootProject.name} v$version")

subprojects { sub ->

    apply plugin: 'java'

    sub.group = 'no.ntnu.ihb.vico'
    sub.version = rootProject.version

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/laht/mvn" }
        maven { url "https://dl.bintray.com/ntnu-ihb/mvn" }
        maven { url "https://dl.bintray.com/open-simulation-platform/maven" }
        maven { url "https://dl.bintray.com/jmonkeyengine/org.jmonkeyengine" }
    }

    dependencies {
        def slf4j_version = '1.7.30'
        implementation "org.slf4j:slf4j-api:$slf4j_version"
        runtimeOnly "org.slf4j:slf4j-log4j12:$slf4j_version"

        def junit_version = '5.6.2'
        testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")
    }

    test {
        failFast = true
        useJUnitPlatform()
    }

    pluginManager.withPlugin('kotlin') {

        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib"
        }

        compileKotlin {
            kotlinOptions.useIR = true
            kotlinOptions.jvmTarget = "1.8"
            kotlinOptions.javaParameters = true
        }
        compileTestKotlin {
            kotlinOptions.jvmTarget = "1.8"
        }

    }

}

tasks.create('cleanTemp') {

    doLast {
        def temp = new File(System.getProperty("java.io.tmpdir"))
        temp.listFiles(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return dir == temp &&
                        name.startsWith("fmi4j_") ||
                        name.startsWith("cosim4j_") ||
                        name.startsWith("libcosim") ||
                        name.startsWith("vesselFmu") ||
                        name.startsWith("vico")
            }
        }).each {
            it.deleteDir()
        }
    }

}

clean.dependsOn(cleanTemp)
