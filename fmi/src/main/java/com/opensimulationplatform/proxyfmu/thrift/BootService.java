/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.opensimulationplatform.proxyfmu.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-09-03")
public class BootService {

  public interface Iface {

    public int loadFromBinaryData(java.lang.String fmuName, java.lang.String instanceName, java.nio.ByteBuffer data) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadFromBinaryData(java.lang.String fmuName, java.lang.String instanceName, java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int loadFromBinaryData(java.lang.String fmuName, java.lang.String instanceName, java.nio.ByteBuffer data) throws org.apache.thrift.TException
    {
      sendLoadFromBinaryData(fmuName, instanceName, data);
      return recvLoadFromBinaryData();
    }

    public void sendLoadFromBinaryData(java.lang.String fmuName, java.lang.String instanceName, java.nio.ByteBuffer data) throws org.apache.thrift.TException
    {
      loadFromBinaryData_args args = new loadFromBinaryData_args();
      args.setFmuName(fmuName);
      args.setInstanceName(instanceName);
      args.setData(data);
      sendBase("loadFromBinaryData", args);
    }

    public int recvLoadFromBinaryData() throws org.apache.thrift.TException
    {
      loadFromBinaryData_result result = new loadFromBinaryData_result();
      receiveBase(result, "loadFromBinaryData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadFromBinaryData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadFromBinaryData(java.lang.String fmuName, java.lang.String instanceName, java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadFromBinaryData_call method_call = new loadFromBinaryData_call(fmuName, instanceName, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadFromBinaryData_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String fmuName;
      private java.lang.String instanceName;
      private java.nio.ByteBuffer data;
      public loadFromBinaryData_call(java.lang.String fmuName, java.lang.String instanceName, java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fmuName = fmuName;
        this.instanceName = instanceName;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadFromBinaryData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadFromBinaryData_args args = new loadFromBinaryData_args();
        args.setFmuName(fmuName);
        args.setInstanceName(instanceName);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recvLoadFromBinaryData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadFromBinaryData", new loadFromBinaryData());
      return processMap;
    }

    public static class loadFromBinaryData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadFromBinaryData_args> {
      public loadFromBinaryData() {
        super("loadFromBinaryData");
      }

      public loadFromBinaryData_args getEmptyArgsInstance() {
        return new loadFromBinaryData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public loadFromBinaryData_result getResult(I iface, loadFromBinaryData_args args) throws org.apache.thrift.TException {
        loadFromBinaryData_result result = new loadFromBinaryData_result();
        result.success = iface.loadFromBinaryData(args.fmuName, args.instanceName, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loadFromBinaryData", new loadFromBinaryData());
      return processMap;
    }

    public static class loadFromBinaryData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadFromBinaryData_args, java.lang.Integer> {
      public loadFromBinaryData() {
        super("loadFromBinaryData");
      }

      public loadFromBinaryData_args getEmptyArgsInstance() {
        return new loadFromBinaryData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            loadFromBinaryData_result result = new loadFromBinaryData_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loadFromBinaryData_result result = new loadFromBinaryData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadFromBinaryData_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.loadFromBinaryData(args.fmuName, args.instanceName, args.data,resultHandler);
      }
    }

  }

  public static class loadFromBinaryData_args implements org.apache.thrift.TBase<loadFromBinaryData_args, loadFromBinaryData_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadFromBinaryData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFromBinaryData_args");

    private static final org.apache.thrift.protocol.TField FMU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fmuName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INSTANCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loadFromBinaryData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loadFromBinaryData_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable java.lang.String fmuName; // required
    private @org.apache.thrift.annotation.Nullable java.lang.String instanceName; // required
    private @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FMU_NAME((short)1, "fmuName"),
      INSTANCE_NAME((short)2, "instanceName"),
      DATA((short)3, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FMU_NAME
            return FMU_NAME;
          case 2: // INSTANCE_NAME
            return INSTANCE_NAME;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FMU_NAME, new org.apache.thrift.meta_data.FieldMetaData("fmuName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INSTANCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("instanceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFromBinaryData_args.class, metaDataMap);
    }

    public loadFromBinaryData_args() {
    }

    public loadFromBinaryData_args(
      java.lang.String fmuName,
      java.lang.String instanceName,
      java.nio.ByteBuffer data)
    {
      this();
      this.fmuName = fmuName;
      this.instanceName = instanceName;
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFromBinaryData_args(loadFromBinaryData_args other) {
      if (other.isSetFmuName()) {
        this.fmuName = other.fmuName;
      }
      if (other.isSetInstanceName()) {
        this.instanceName = other.instanceName;
      }
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
      }
    }

    public loadFromBinaryData_args deepCopy() {
      return new loadFromBinaryData_args(this);
    }

    @Override
    public void clear() {
      this.fmuName = null;
      this.instanceName = null;
      this.data = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFmuName() {
      return this.fmuName;
    }

    public loadFromBinaryData_args setFmuName(@org.apache.thrift.annotation.Nullable java.lang.String fmuName) {
      this.fmuName = fmuName;
      return this;
    }

    public void unsetFmuName() {
      this.fmuName = null;
    }

    /** Returns true if field fmuName is set (has been assigned a value) and false otherwise */
    public boolean isSetFmuName() {
      return this.fmuName != null;
    }

    public void setFmuNameIsSet(boolean value) {
      if (!value) {
        this.fmuName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getInstanceName() {
      return this.instanceName;
    }

    public loadFromBinaryData_args setInstanceName(@org.apache.thrift.annotation.Nullable java.lang.String instanceName) {
      this.instanceName = instanceName;
      return this;
    }

    public void unsetInstanceName() {
      this.instanceName = null;
    }

    /** Returns true if field instanceName is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceName() {
      return this.instanceName != null;
    }

    public void setInstanceNameIsSet(boolean value) {
      if (!value) {
        this.instanceName = null;
      }
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public java.nio.ByteBuffer bufferForData() {
      return org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    public loadFromBinaryData_args setData(byte[] data) {
      this.data = data == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(data.clone());
      return this;
    }

    public loadFromBinaryData_args setData(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer data) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FMU_NAME:
        if (value == null) {
          unsetFmuName();
        } else {
          setFmuName((java.lang.String)value);
        }
        break;

      case INSTANCE_NAME:
        if (value == null) {
          unsetInstanceName();
        } else {
          setInstanceName((java.lang.String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          if (value instanceof byte[]) {
            setData((byte[])value);
          } else {
            setData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FMU_NAME:
        return getFmuName();

      case INSTANCE_NAME:
        return getInstanceName();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FMU_NAME:
        return isSetFmuName();
      case INSTANCE_NAME:
        return isSetInstanceName();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFromBinaryData_args)
        return this.equals((loadFromBinaryData_args)that);
      return false;
    }

    public boolean equals(loadFromBinaryData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fmuName = true && this.isSetFmuName();
      boolean that_present_fmuName = true && that.isSetFmuName();
      if (this_present_fmuName || that_present_fmuName) {
        if (!(this_present_fmuName && that_present_fmuName))
          return false;
        if (!this.fmuName.equals(that.fmuName))
          return false;
      }

      boolean this_present_instanceName = true && this.isSetInstanceName();
      boolean that_present_instanceName = true && that.isSetInstanceName();
      if (this_present_instanceName || that_present_instanceName) {
        if (!(this_present_instanceName && that_present_instanceName))
          return false;
        if (!this.instanceName.equals(that.instanceName))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFmuName()) ? 131071 : 524287);
      if (isSetFmuName())
        hashCode = hashCode * 8191 + fmuName.hashCode();

      hashCode = hashCode * 8191 + ((isSetInstanceName()) ? 131071 : 524287);
      if (isSetInstanceName())
        hashCode = hashCode * 8191 + instanceName.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loadFromBinaryData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFmuName()).compareTo(other.isSetFmuName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFmuName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmuName, other.fmuName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInstanceName()).compareTo(other.isSetInstanceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceName, other.instanceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loadFromBinaryData_args(");
      boolean first = true;

      sb.append("fmuName:");
      if (this.fmuName == null) {
        sb.append("null");
      } else {
        sb.append(this.fmuName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("instanceName:");
      if (this.instanceName == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFromBinaryData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadFromBinaryData_argsStandardScheme getScheme() {
        return new loadFromBinaryData_argsStandardScheme();
      }
    }

    private static class loadFromBinaryData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loadFromBinaryData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFromBinaryData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FMU_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fmuName = iprot.readString();
                struct.setFmuNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INSTANCE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.instanceName = iprot.readString();
                struct.setInstanceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFromBinaryData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fmuName != null) {
          oprot.writeFieldBegin(FMU_NAME_FIELD_DESC);
          oprot.writeString(struct.fmuName);
          oprot.writeFieldEnd();
        }
        if (struct.instanceName != null) {
          oprot.writeFieldBegin(INSTANCE_NAME_FIELD_DESC);
          oprot.writeString(struct.instanceName);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFromBinaryData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadFromBinaryData_argsTupleScheme getScheme() {
        return new loadFromBinaryData_argsTupleScheme();
      }
    }

    private static class loadFromBinaryData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loadFromBinaryData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFromBinaryData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFmuName()) {
          optionals.set(0);
        }
        if (struct.isSetInstanceName()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFmuName()) {
          oprot.writeString(struct.fmuName);
        }
        if (struct.isSetInstanceName()) {
          oprot.writeString(struct.instanceName);
        }
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFromBinaryData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fmuName = iprot.readString();
          struct.setFmuNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.instanceName = iprot.readString();
          struct.setInstanceNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loadFromBinaryData_result implements org.apache.thrift.TBase<loadFromBinaryData_result, loadFromBinaryData_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadFromBinaryData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFromBinaryData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loadFromBinaryData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loadFromBinaryData_resultTupleSchemeFactory();

    private int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFromBinaryData_result.class, metaDataMap);
    }

    public loadFromBinaryData_result() {
    }

    public loadFromBinaryData_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFromBinaryData_result(loadFromBinaryData_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public loadFromBinaryData_result deepCopy() {
      return new loadFromBinaryData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public loadFromBinaryData_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFromBinaryData_result)
        return this.equals((loadFromBinaryData_result)that);
      return false;
    }

    public boolean equals(loadFromBinaryData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(loadFromBinaryData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loadFromBinaryData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFromBinaryData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadFromBinaryData_resultStandardScheme getScheme() {
        return new loadFromBinaryData_resultStandardScheme();
      }
    }

    private static class loadFromBinaryData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loadFromBinaryData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFromBinaryData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFromBinaryData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFromBinaryData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loadFromBinaryData_resultTupleScheme getScheme() {
        return new loadFromBinaryData_resultTupleScheme();
      }
    }

    private static class loadFromBinaryData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loadFromBinaryData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFromBinaryData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFromBinaryData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
